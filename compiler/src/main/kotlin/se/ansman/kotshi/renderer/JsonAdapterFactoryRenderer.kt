package se.ansman.kotshi.renderer

import com.squareup.kotlinpoet.AnnotationSpec
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.ParameterSpec
import com.squareup.kotlinpoet.ParameterizedTypeName.Companion.parameterizedBy
import com.squareup.kotlinpoet.STAR
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.asClassName
import com.squareup.moshi.JsonAdapter
import se.ansman.kotshi.Functions
import se.ansman.kotshi.Types
import se.ansman.kotshi.addControlFlow
import se.ansman.kotshi.model.JsonAdapterFactory
import se.ansman.kotshi.model.moshiTypes
import se.ansman.kotshi.nullable
import se.ansman.kotshi.rawType

class JsonAdapterFactoryRenderer(private val factory: JsonAdapterFactory) {
    fun render(typeSpecModifier: TypeSpec.Builder.() -> Unit): FileSpec =
        FileSpec.builder(factory.factoryClassName.packageName, factory.factoryClassName.simpleName)
            .addComment("Code generated by Kotshi. Do not edit.")
            .addAnnotation(
                AnnotationSpec.builder(Types.Kotlin.suppress)
                    .addMember("%S", "EXPERIMENTAL_IS_NOT_ENABLED")
                    .build()
            )
            .addType(
                TypeSpec.objectBuilder(factory.factoryClassName)
                    .addModifiers(KModifier.INTERNAL)
                    .apply {
                        when (factory.usageType) {
                            JsonAdapterFactory.UsageType.Standalone -> addSuperinterface(Types.Moshi.jsonAdapterFactory)
                            is JsonAdapterFactory.UsageType.Subclass -> addSuperinterface(factory.usageType.parent)
                        }
                    }
                    .addAnnotation(
                        AnnotationSpec.builder(Types.Kotlin.optIn)
                            .addMember("%T::class", Types.Kotshi.internalKotshiApi)
                            .build()
                    )
                    .addFunction(
                        makeCreateFunction(
                            typeParam = ParameterSpec("type", Types.Java.type),
                            annotationsParam = ParameterSpec(
                                "annotations",
                                Types.Kotlin.set.parameterizedBy(Types.Kotlin.annotation)
                            ),
                            moshiParam = ParameterSpec("moshi", Types.Moshi.moshi)
                        )
                    )
                    .apply(typeSpecModifier)
                    .build()
            )
            .build()

    private fun makeCreateFunction(
        typeParam: ParameterSpec,
        annotationsParam: ParameterSpec,
        moshiParam: ParameterSpec,
    ): FunSpec {
        val createSpec = FunSpec.builder("create")
            .addModifiers(KModifier.OVERRIDE)
            .returns(JsonAdapter::class.asClassName().parameterizedBy(STAR).nullable())
            .addParameter(typeParam)
            .addParameter(annotationsParam)
            .addParameter(moshiParam)

        if (factory.adapters.isEmpty()) {
            return createSpec
                .addStatement("return null")
                .build()
        }

        return createSpec
            .addStatement("if (%N.isNotEmpty()) return null", annotationsParam)
            .addCode("\n")
            .addControlFlow("return when (%T.getRawType(%N))", moshiTypes, typeParam) {
                for (adapter in factory.adapters.sortedBy { it.adapterClassName }) {
                    addCode("«%T::class.java ->\n%T", adapter.adapter.targetType.rawType, adapter.adapterClassName)
                    if (adapter.adapter.targetTypeVariables.isNotEmpty()) {
                        addCode(
                            adapter.adapter.targetTypeVariables.joinToString(
                                ", ",
                                prefix = "<",
                                postfix = ">"
                            ) { "Nothing" })
                    }
                    addCode("(")
                    if (adapter.requiresMoshi) {
                        addCode("moshi = %N", moshiParam)
                    }
                    if (adapter.requiresTypes) {
                        if (adapter.requiresMoshi) {
                            addCode(", ")
                        }
                        addCode("types = %N.%M", typeParam, Functions.Kotshi.typeArgumentsOrFail)
                    }
                    addCode(")\n»")
                }
                addStatement("else -> null")
            }
            .build()
    }
}