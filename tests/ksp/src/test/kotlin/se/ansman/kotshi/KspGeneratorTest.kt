package se.ansman.kotshi

import assertk.assertThat
import assertk.assertions.isEqualTo
import com.google.devtools.ksp.processing.SymbolProcessorProvider
import com.tschuchort.compiletesting.JvmCompilationResult
import com.tschuchort.compiletesting.KotlinCompilation
import com.tschuchort.compiletesting.SourceFile
import com.tschuchort.compiletesting.kspArgs
import com.tschuchort.compiletesting.kspIncremental
import com.tschuchort.compiletesting.symbolProcessorProviders
import org.jetbrains.kotlin.compiler.plugin.ExperimentalCompilerApi
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.parallel.Execution
import org.junit.jupiter.api.parallel.ExecutionMode
import se.ansman.kotshi.ksp.KotshiSymbolProcessor
import se.ansman.kotshi.ksp.KotshiSymbolProcessorProvider
import java.io.File

@Execution(ExecutionMode.SAME_THREAD)
@OptIn(ExperimentalCompilerApi::class)
class KspGeneratorTest : BaseGeneratorTest() {
    override val processorClassName: String get() = KotshiSymbolProcessor::class.java.canonicalName

    override val extraGeneratedFiles: List<File>
        get() = temporaryFolder.resolve("ksp/sources/kotlin/").listFiles()?.asList() ?: emptyList()

    override fun KotlinCompilation.setUp(options: Map<String, String>) {
        kspIncremental = true
        symbolProcessorProviders = listOf<SymbolProcessorProvider>(KotshiSymbolProcessorProvider())
        kspArgs.putAll(options)
    }

    // https://github.com/tschuchortdev/kotlin-compile-testing/issues/312
    override fun JvmCompilationResult.tryLoadClass(name: String): Class<*>? = null

    @Test
    fun `incremental compilation`() {
        val factory = SourceFile.kotlin(
            "factory.kt", """
            @se.ansman.kotshi.KotshiJsonAdapterFactory
            object TestFactory : com.squareup.moshi.JsonAdapter.Factory by KotshiTestFactory
        """.trimIndent()
        )

        with(compile(factory)) {
            assertThat(this::exitCode)
                .isEqualTo(KotlinCompilation.ExitCode.OK)
            assertThat(getSourceByName("KotshiTestFactory.kt")).isEqualTo(
                """
                    // Code generated by Kotshi. Do not edit.
                    @file:Suppress(
                      "EXPERIMENTAL_IS_NOT_ENABLED",
                      "REDUNDANT_PROJECTION",
                    )

                    import com.squareup.moshi.JsonAdapter
                    import com.squareup.moshi.Moshi
                    import java.lang.reflect.Type
                    import kotlin.Annotation
                    import kotlin.OptIn
                    import kotlin.Suppress
                    import kotlin.collections.Set
                    import se.ansman.kotshi.InternalKotshiApi

                    @OptIn(InternalKotshiApi::class)
                    internal object KotshiTestFactory : JsonAdapter.Factory {
                      override fun create(
                        type: Type,
                        annotations: Set<Annotation>,
                        moshi: Moshi,
                      ): JsonAdapter<*>? = null
                    }
                """.trimIndent()
            )
        }

        val object1 = SourceFile.kotlin(
            "object1.kt", """
            @se.ansman.kotshi.JsonSerializable
            data class Object1(val property1: String)
        """.trimIndent()
        )
        with(compile(factory, object1)) {
            assertThat(this::exitCode)
                .isEqualTo(KotlinCompilation.ExitCode.OK)
            assertThat(getSourceByName("KotshiTestFactory.kt")).isEqualTo(
                """
                    // Code generated by Kotshi. Do not edit.
                    @file:Suppress(
                      "EXPERIMENTAL_IS_NOT_ENABLED",
                      "REDUNDANT_PROJECTION",
                    )

                    import com.squareup.moshi.JsonAdapter
                    import com.squareup.moshi.Moshi
                    import com.squareup.moshi.Types.getRawType
                    import java.lang.Class
                    import java.lang.reflect.Type
                    import kotlin.Annotation
                    import kotlin.OptIn
                    import kotlin.Suppress
                    import kotlin.collections.Set
                    import se.ansman.kotshi.InternalKotshiApi

                    @OptIn(InternalKotshiApi::class)
                    internal object KotshiTestFactory : JsonAdapter.Factory {
                      override fun create(
                        type: Type,
                        annotations: Set<Annotation>,
                        moshi: Moshi,
                      ): JsonAdapter<*>? {
                        val rawType: Class<*> = getRawType(type)
                        if (annotations.isNotEmpty()) return null

                        return when (rawType) {
                          Object1::class.java ->
                              KotshiObject1JsonAdapter()
                          else -> null
                        }
                      }
                    }
                """.trimIndent(),
            )
        }

        var object2 = SourceFile.kotlin(
            "object2.kt", """
            data class Object2(val property2: String)
        """.trimIndent()
        )
        with(compile(factory, object1, object2)) {
            assertThat(this::exitCode)
                .isEqualTo(KotlinCompilation.ExitCode.OK)
            assertThat(getSourceByName("KotshiTestFactory.kt")).isEqualTo(
                """
                    // Code generated by Kotshi. Do not edit.
                    @file:Suppress(
                      "EXPERIMENTAL_IS_NOT_ENABLED",
                      "REDUNDANT_PROJECTION",
                    )

                    import com.squareup.moshi.JsonAdapter
                    import com.squareup.moshi.Moshi
                    import com.squareup.moshi.Types.getRawType
                    import java.lang.Class
                    import java.lang.reflect.Type
                    import kotlin.Annotation
                    import kotlin.OptIn
                    import kotlin.Suppress
                    import kotlin.collections.Set
                    import se.ansman.kotshi.InternalKotshiApi

                    @OptIn(InternalKotshiApi::class)
                    internal object KotshiTestFactory : JsonAdapter.Factory {
                      override fun create(
                        type: Type,
                        annotations: Set<Annotation>,
                        moshi: Moshi,
                      ): JsonAdapter<*>? {
                        val rawType: Class<*> = getRawType(type)
                        if (annotations.isNotEmpty()) return null

                        return when (rawType) {
                          Object1::class.java ->
                              KotshiObject1JsonAdapter()
                          else -> null
                        }
                      }
                    }
                """.trimIndent()
            )
        }

        object2 = SourceFile.kotlin(
            "object2.kt", """
            @se.ansman.kotshi.JsonSerializable
            data class Object2(val property2: String)
        """.trimIndent()
        )
        with(compile(factory, object1, object2)) {
            assertThat(this::exitCode)
                .isEqualTo(KotlinCompilation.ExitCode.OK)
            assertThat(getSourceByName("KotshiTestFactory.kt")).isEqualTo(
                """
                    // Code generated by Kotshi. Do not edit.
                    @file:Suppress(
                      "EXPERIMENTAL_IS_NOT_ENABLED",
                      "REDUNDANT_PROJECTION",
                    )

                    import com.squareup.moshi.JsonAdapter
                    import com.squareup.moshi.Moshi
                    import com.squareup.moshi.Types.getRawType
                    import java.lang.Class
                    import java.lang.reflect.Type
                    import kotlin.Annotation
                    import kotlin.OptIn
                    import kotlin.Suppress
                    import kotlin.collections.Set
                    import se.ansman.kotshi.InternalKotshiApi

                    @OptIn(InternalKotshiApi::class)
                    internal object KotshiTestFactory : JsonAdapter.Factory {
                      override fun create(
                        type: Type,
                        annotations: Set<Annotation>,
                        moshi: Moshi,
                      ): JsonAdapter<*>? {
                        val rawType: Class<*> = getRawType(type)
                        if (annotations.isNotEmpty()) return null

                        return when (rawType) {
                          Object1::class.java ->
                              KotshiObject1JsonAdapter()
                          Object2::class.java ->
                              KotshiObject2JsonAdapter()
                          else -> null
                        }
                      }
                    }
                """.trimIndent()
            )
        }

        object2 = SourceFile.kotlin(
            "object2.kt", """
            @se.ansman.kotshi.JsonSerializable
            object Object2
        """.trimIndent()
        )
        with(compile(factory, object1, object2)) {
            assertThat(this::exitCode)
                .isEqualTo(KotlinCompilation.ExitCode.OK)
            assertThat(getSourceByName("KotshiTestFactory.kt")).isEqualTo(
                """
                    // Code generated by Kotshi. Do not edit.
                    @file:Suppress(
                      "EXPERIMENTAL_IS_NOT_ENABLED",
                      "REDUNDANT_PROJECTION",
                    )

                    import com.squareup.moshi.JsonAdapter
                    import com.squareup.moshi.Moshi
                    import com.squareup.moshi.Types.getRawType
                    import java.lang.Class
                    import java.lang.reflect.Type
                    import kotlin.Annotation
                    import kotlin.OptIn
                    import kotlin.Suppress
                    import kotlin.collections.Set
                    import se.ansman.kotshi.InternalKotshiApi

                    @OptIn(InternalKotshiApi::class)
                    internal object KotshiTestFactory : JsonAdapter.Factory {
                      override fun create(
                        type: Type,
                        annotations: Set<Annotation>,
                        moshi: Moshi,
                      ): JsonAdapter<*>? {
                        val rawType: Class<*> = getRawType(type)
                        if (annotations.isNotEmpty()) return null

                        return when (rawType) {
                          Object1::class.java ->
                              KotshiObject1JsonAdapter()
                          Object2::class.java ->
                              KotshiObject2JsonAdapter()
                          else -> null
                        }
                      }
                    }
                """.trimIndent()
            )
        }

        with(compile(factory, object2)) {
            assertThat(this::exitCode)
                .isEqualTo(KotlinCompilation.ExitCode.OK)
            assertThat(getSourceByName("KotshiTestFactory.kt")).isEqualTo(
                """
                    // Code generated by Kotshi. Do not edit.
                    @file:Suppress(
                      "EXPERIMENTAL_IS_NOT_ENABLED",
                      "REDUNDANT_PROJECTION",
                    )

                    import com.squareup.moshi.JsonAdapter
                    import com.squareup.moshi.Moshi
                    import com.squareup.moshi.Types.getRawType
                    import java.lang.Class
                    import java.lang.reflect.Type
                    import kotlin.Annotation
                    import kotlin.OptIn
                    import kotlin.Suppress
                    import kotlin.collections.Set
                    import se.ansman.kotshi.InternalKotshiApi

                    @OptIn(InternalKotshiApi::class)
                    internal object KotshiTestFactory : JsonAdapter.Factory {
                      override fun create(
                        type: Type,
                        annotations: Set<Annotation>,
                        moshi: Moshi,
                      ): JsonAdapter<*>? {
                        val rawType: Class<*> = getRawType(type)
                        if (annotations.isNotEmpty()) return null

                        return when (rawType) {
                          Object2::class.java ->
                              KotshiObject2JsonAdapter()
                          else -> null
                        }
                      }
                    }
                """.trimIndent()
            )
        }
    }

    @Disabled("kotlin-compile-testing doesn't work well with overriding language version yet")
    override fun `non data object logs warnings`() {}
}